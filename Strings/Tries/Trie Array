struct triearr {
	ll words = 0, ab, totalLen, trieSize = 1;
	vector<vector<ll>> trie;
	vector<ll> info;
	char firstLetter;
	triearr(ll totalLen, ll absz, char first) {
		this->totalLen = totalLen;
		this->ab = absz;
		this->firstLetter = first;
		trie.assign(totalLen, vector<ll>(absz, -1));
		info.assign(totalLen, -1);
	}
	ll insert(const string& str) {
		ll len = str.length(), cur = 0;
		foru(i, 0, len) {
			if (trie[cur][str[i] - firstLetter] == -1)
				trie[cur][str[i] - firstLetter] = trieSize++;
			cur = trie[cur][str[i] - firstLetter];
		}
		return info[cur] = words++;
	}
	bool erase(const string& str) {
		ll len = str.length(), cur = 0;
		foru(i, 0, len) {
			if (trie[cur][str[i] - firstLetter] == -1)
				return false;
			cur = trie[cur][str[i] - firstLetter];
		}
		if (info[cur]) {
			info[cur] = -1;
			words--;
			return true;
		}
		return false;
	}
	ll search(const string& str) {
		ll len = str.length(), cur = 0;
		foru(i, 0, len) {
			if (trie[cur][str[i] - firstLetter] == -1)
				return -1;
			cur = trie[cur][str[i] - firstLetter];
		}
		return info[cur];
	}
};
