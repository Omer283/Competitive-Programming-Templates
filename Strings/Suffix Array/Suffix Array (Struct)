struct suffix {
public:
    string s;
    vector<int> arr, sufarr;
    int n;
 
    suffix(string s) {
        s.push_back('$');
        n = s.length();
        arr.resize(n);
        vector<pair<char, int>> tmpv;
        foru(i, 0, n)tmpv.pb({s[i], i});
        sort(tmpv.begin(), tmpv.end());//try counting
        int cur = -1;
        foru(i, 0, n) {
            if (i && tmpv[i].first == tmpv[i - 1].first)
                arr[tmpv[i].second] = cur;
            else arr[tmpv[i].second] = ++cur;
        }
        int curLen = 1;
        vector<pair<pii, int>> myvec(n);
        vector<vector<pair<pii, int>>> buckets(n);
        do {
            cur = 0;
            foru(i, 0, n) {
                buckets[arr[(i + curLen) % n]].pb({{arr[i], arr[(i + curLen) % n]}, i});
            }
            foru(i, 0, n) {
                for (pair<pii, int> x : buckets[i])myvec[cur++] = x;
                buckets[i].clear();
            }
            cur = 0;
            foru(i, 0, n)buckets[myvec[i].first.first].pb({myvec[i].first, myvec[i].second});
            foru(i, 0, n) {
                for (pair<pii, int> x : buckets[i])myvec[cur++] = x;
                buckets[i].clear();
            }
            cur = -1;
            foru(i, 0, n) {
                if (i && myvec[i].first == myvec[i - 1].first)
                    arr[myvec[i].second] = cur;
                else arr[myvec[i].second] = ++cur;
            }
            curLen <<= 1;
        } while (curLen < n);
        sufarr.resize(n);
        foru(i,0,n)sufarr[arr[i]]=i;
    }
};
