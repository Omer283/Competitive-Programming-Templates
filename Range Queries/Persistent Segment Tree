/*
Author: Omer223
Purpose: Persistent segment tree using pointers.
Date: 28/03/2021
Confirmed: Yes, self tests and https://codeforces.com/contest/786/problem/C.
*/
template<class T>
struct PSeg {
public:
	struct Vertex {
		const static T NEUTRAL = 0; //CHANGE
		static T action(const T& lhs, const T& rhs) {
			return lhs + rhs; //CHANGE
		}
		T val;
		Vertex* lptr, *rptr;
		int size = 0;
		Vertex(const T& myval) {
			val = myval;
			lptr = rptr = NULL;
			size = 1;
		}
		Vertex(const T& myval, Vertex* _lptr, Vertex* _rptr) {
			val = myval;
			lptr = _lptr;
			rptr = _rptr;
			val = action(val, _lptr->val);
			val = action(val, _rptr->val);
			size = lptr->size + rptr->size;
		}
	};
	int n;
	Vertex* head;
	PSeg() : n(0), head(NULL) {}
	PSeg(const vector<T>& arr) {
		this->a = arr;
		this->n = arr.size();
		head = build(0, n - 1);
	}
	Vertex* update(int pos, const T& val) { //updates current version
		Vertex* nhead = updateHelp(head, 0, n - 1, pos, val);
		head = nhead;
		return nhead;
	}
	Vertex* update(Vertex* myhead, int pos, const T& val) { //updates previous version
		return updateHelp(myhead, 0, myhead->size - 1, pos, val);
	}
	T query(int l, int r) {
		return queryHelp(head, l, r, 0, n - 1);
	}
	T query(Vertex* myhead, int l, int r) {
		return queryHelp(myhead, l, r, 0, myhead->size - 1);
	}
private:
	vector<T> a;
	Vertex* build(int l, int r) {
		if (l == r)
			return new Vertex(a[l]);
		int mid = (l + r) / 2;
		Vertex* lptr = build(l, mid), *rptr = build(mid + 1, r);
		return new Vertex(Vertex::NEUTRAL, lptr, rptr);
	}
	Vertex* updateHelp(Vertex *cur, int l, int r, int pos, const T& val) {
		if (l == r)
			return new Vertex(val);
		int mid = (l + r) / 2;
		Vertex* lptr = cur->lptr, *rptr = cur->rptr;
		if (pos <= mid)
			lptr = updateHelp(lptr, l, mid, pos, val);
		else
			rptr = updateHelp(rptr, mid + 1, r, pos, val);
		return new Vertex(Vertex::NEUTRAL, lptr, rptr);
	}
	T queryHelp(Vertex* cur, int l, int r, int crl, int crr) {
		if (crr<l || crl>r)
			return Vertex::NEUTRAL;
		else if (crr <= r && crl >= l)
			return cur->val;
		else {
			int mid = (crl + crr) / 2;
			return Vertex::action(queryHelp(cur->lptr, l, r, crl, mid),
				queryHelp(cur->rptr, l, r, mid + 1, r));
		}
	}
};
