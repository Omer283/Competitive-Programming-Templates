
  //RESIZE 4N
  //CHECK QUERYUTIL RETURN
	void build(int i, int l, int r) {
		if (l > r)return;
		else if (l == r)seg[i] = arr[l];
		else {
			int mid = (l + r) / 2;
			build(2 * i, l, mid);
			build(2 * i + 1, mid + 1, r);
			seg[i] = action(seg[2 * i], seg[2 * i + 1]);
		}
	}
	ll queryUtil(int i, int cl, int cr, int l, int r) {
		if (l > r)return 1e9;
		else if (l == cl && r == cr)return seg[i];
		else {
			int mid = (cl + cr) / 2;
			ll a = queryUtil(2 * i, cl, mid, l, min(mid, r)),
				b = queryUtil(2 * i + 1, mid + 1, cr, max(mid + 1, l), r);
			return action(a, b);
		}
	}
	void updateUtil(int i, int l, int r, int pos, ll val) {
		if (l == r)seg[i] = val;
		else {
			int mid = (l + r) / 2;
			if (pos <= mid)updateUtil(2 * i, l, mid, pos, val);
			else updateUtil(2 * i + 1, mid + 1, r, pos, val);
			seg[i] = action(seg[2 * i], seg[2 * i + 1]);
		}
	}
	ll query(int l, int r) {
		return queryUtil(1, 0, n - 1, l, r);
	}
	void update(int i, T val) {
		updateUtil(1, 0, n - 1, i, val);
	}
