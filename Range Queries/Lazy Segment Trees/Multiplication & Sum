template<class T>
struct seglazy {
	vector<pii> lohi;
	vector<T> values, delta;
	int n;
private:
	void pushDown(int i) {
		delta[2 * i] *= delta[i]; delta[2 * i] %= MOD; //CHECK
		delta[2 * i + 1] *= delta[i]; delta[2 * i + 1] %= MOD;
		delta[i] = 1;
	}
	void update(int i) {
		values[i] = values[2 * i] * delta[2 * i] + values[2 * i + 1] * delta[2 * i + 1];
		values[i] %= MOD;//CHECK
	}
	void init(int i, int a, int b) {
		lohi[i].first = a;
		lohi[i].second = b;
		if (a > b)return;
		if (a == b) {
			values[i] = 1;
			return;
		}
		int m = (a + b) / 2;
		init(2 * i, a, m);
		init(2 * i + 1, m + 1, b);
		values[i] = values[2 * i] + values[2 * i + 1];
	}
	T rangeQueryUtil(int i, int a, int b) {
		if (a > b || lohi[i].first > b || lohi[i].second < a)return 0; //CHECK
		else if (lohi[i].first >= a && lohi[i].second <= b) return (values[i] * delta[i]) % MOD;
		else {
			pushDown(i);
			T left = rangeQueryUtil(2 * i, a, b);
			T right = rangeQueryUtil(2 * i + 1, a, b);
			update(i);
			return (left + right) % MOD; //CHECK
		}
	}
	void rangeUpdateUtil(int i, int a, int b, T val) {
		if (a > b || lohi[i].first > b || lohi[i].second < a)return;
		else if (lohi[i].first >= a && lohi[i].second <= b) {
			delta[i] *= val;
			delta[i] %= MOD;
		}
		else {
			pushDown(i);
			rangeUpdateUtil(2 * i, a, b, val);
			rangeUpdateUtil(2 * i + 1, a, b, val);
			update(i);
		}
	}
public:
	seglazy(int n) {
		this->n = n;
		lohi.resize(4 * n + 1);
		delta.resize(4 * n + 1);
		values.resize(4 * n + 1);
		fill(values.begin(), values.end(), 0);
		fill(delta.begin(), delta.end(), 1);
		init(1, 0, n - 1);
	}
	seglazy(vector<T> arr) {
		this->n = arr.size();
		lohi.resize(4 * n + 1);
		delta.resize(4 * n + 1);
		values.resize(4 * n + 1);
		fill(delta.begin(), delta.end(), 0);
		init(1, 0, n - 1);
		foru(i, 0, n) rangeUpdate(i, i, arr[i]);
	}
	void rangeUpdate(int from, int to, T val) {
		rangeUpdateUtil(1, from, to, val);
	}
	T rangeQuery(int from, int to) {
		return rangeQueryUtil(1, from, to);
	}
};
