/*
Author: Omer223
Purpose: Li Chao tree, not sparse, supports negatives. Defaulted to maximum.
Date: 17/9/2021
Confirmed: Yes, https://codeforces.com/contest/631/problem/E
*/
typedef ll ftype;
typedef pair<ftype, ftype> Line;

const int maxn = 2e6 + 5;
int largestEval;
Line seg[4 * maxn];

inline ftype eval(const Line & ln, const ftype & x) {
    return ln.ff * x + ln.ss;
}

const ftype neginf = -1e16; //CHANGE

inline bool cmp(const ftype& lhs, const ftype& rhs) {
    return lhs > rhs; //CHANGE
}
inline ftype better(const ftype& lhs, const ftype& rhs) {
    return max(lhs, rhs);
}

void addLine(Line ln, int i, int l, int r) { //r excluded
    if (ln == seg[i])return;
    int mid = (l + r) / 2;
    int realL = l - largestEval, realMid = mid - largestEval;
    bool lBetter = cmp(eval(ln, realL), eval(seg[i], realL));
    bool midBetter = cmp(eval(ln, realMid), eval(seg[i], realMid));
    if (midBetter)
        swap(seg[i], ln);
    if (r - l == 1)
        return;
    else if (midBetter != lBetter)
        addLine(ln, 2 * i, l, mid);
    else
        addLine(ln, 2 * i + 1, mid, r);
}
ftype query(ftype x, int i, int l, int r) {
    if (r - l == 1)
        return eval(seg[i], x);
    int mid = (l + r) / 2;
    if (x + largestEval < mid)
        return better(query(x, 2 * i, l, mid), eval(seg[i], x));
    else
        return better(query(x, 2 * i + 1, mid, r), eval(seg[i], x));
}

