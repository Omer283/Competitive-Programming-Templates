import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

public class Sol4 {
    private static ArrayList<int[]> options = new ArrayList<>();

    public static int[] solution(int[][] times, int times_limit) {
        int bunnies = times.length - 2;
        long[][] dist = floydWarshall(times);
        boolean negCycle = isNegCycle(dist);
        if(negCycle) {
            int[] answer = new int[bunnies];
            for (int i = 0; i < bunnies; i++) {
                answer[i] = i;
            }
            return answer;
        }
        generateOptions(bunnies);
        int[] bestArr = null;
        for (int[] arr : options) {
            boolean test = isPossible(arr, dist, times_limit);
            if (test) {
                Arrays.sort(arr);
                if (bestArr == null || isBetter(arr, bestArr)) {
                    bestArr = arr;
                }
            }
        }
        return bestArr;
    }
    private static boolean isBetter(int[] a, int[] b) {
        if (a.length > b.length) {
            return true;
        }
        else if (a.length < b.length) {
            return false;
        }
        int n = a.length;
        for (int i = 0; i < n; i++) {
            if (a[i] < b[i]) {
                return true;
            }
            else if (a[i] > b[i]) {
                return false;
            }
        }
        return false;
    }
    private static boolean isPossible(int[] arr, long[][] dist, long times_limit) {
        long currentTime = times_limit;
        int len = arr.length;
        currentTime -= dist[0][arr[0] + 1];
        for (int i = 1; i < len; i++) {
            currentTime -= dist[arr[i - 1] + 1][arr[i] + 1];
        }
        currentTime -= dist[arr[len - 1] + 1][dist.length - 1];
        return (currentTime >= 0);
    }

    private static void generateOptions(int bunnies) {
        HashSet<Integer> nums = new HashSet<>();
        int serialNum, id, bits;
        for (int i = 1; i < (1 << bunnies); i++) {
            nums.clear();
            serialNum = i;
            id = 0;
            bits = Integer.bitCount(i);
            while (serialNum != 0) {
                while (serialNum % 2 == 0) {
                    serialNum >>= 1;
                    id++;
                }
                nums.add(id);
                id++;
                serialNum >>= 1;
            }
            int[] perm = new int[bits];
            generatePermutations(nums, perm, 0);
        }
    }

    private static void generatePermutations(HashSet<Integer> nums, int[] perm, int amt) {
        if (amt == perm.length) {
            options.add(perm);
            return;
        }
        HashSet<Integer> tmpSet = new HashSet(nums);
        int[] tmpPerm;
        for (Integer i : nums) {
            tmpSet.remove(i);
            tmpPerm = new int[perm.length];
            tmpPerm = perm.clone();
            tmpPerm[amt] = i;
            generatePermutations(tmpSet, tmpPerm, amt + 1);
            tmpSet.add(i);
        }
        return;
    }

    private static boolean isNegCycle(long[][] dist) {
        int n = dist.length;
        for (int i = 0; i < n; i++) {
            if (dist[i][i] < 0) {
                return true;
            }
        }
        return false;
    }

    private static long[][] floydWarshall(int[][] adj) { //floyd warshall
        int n = adj.length;
        long dist[][] = new long[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dist[i][j]=adj[i][j];
            }
        }
        for(int a=0;a<n;a++){
            for(int b=0;b<n;b++){
                for(int c=0;c<n;c++){
                    if(dist[b][a]+dist[a][c]<dist[b][c])dist[b][c]=dist[b][a]+dist[a][c];
                }
            }
        }
        return dist;
    }
    public static void main(String[] args) {
        int[][] m = {{0, 2, 2, 2, -1}, {9, 0, 2, 2, -1}, {9, 3, 0, 2, -1}, {9, 3, 2, 0, -1}, {9, 3, 2, 2, 0}};
        generateOptions(4);
        for(int[] d : options) {
            for(int k : d) {
                System.out.print(k);
            }
            System.out.println();
        }
    }
}
