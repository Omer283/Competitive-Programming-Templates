import java.util.Arrays;
import java.util.BitSet;

public class Solution {
    private static class Line implements Comparable<Line> {
        boolean isMe;
        int md;
        public Line() {
            isMe = false;
            md = 0;
        }
        public Line(boolean me, int mod) {
            md = mod;
            isMe = me;
        }
        @Override
        public int compareTo(Line o) {
            return md - o.md;
        }
    }


    public static int solution(int[] dimensions, int[] your_position, int[] guard_position, int distance) {
        //terrible brute force solution, just testing something
        BitSet[] bt = new BitSet[2 * distance + 4];
        for (int i = 0; i < bt.length; i++) bt[i] = new BitSet(2 * distance + 4);
        int ans = 0;
        if(your_position[0]==guard_position[0]&&your_position[1]==guard_position[1]) return 0;
        int[] dim2 = new int[2];
        int[][] me = new int[2][2], guard = new int[2][2];
        dim2[0] = dimensions[0] * 2;
        dim2[1] = dimensions[1] * 2;
        me[0][0] = dim2[0];
        me[0][1] = 2*(dimensions[0] - your_position[0]);
        me[1][0] = dim2[1];
        me[1][1] = 2*(dimensions[1]-your_position[1]);
        guard[0][0] = (guard_position[0] - your_position[0] + dim2[0]) % dim2[0];
        guard[0][1] = 2*(dimensions[0]-guard_position[0])+guard_position[0]-your_position[0];
        guard[1][0] = ((guard_position[1] - your_position[1]) + dim2[1]) % dim2[1];
        guard[1][1] = 2*(dimensions[1]-guard_position[1])+guard_position[1]-your_position[1];
        Line[] yl = new Line[4], xl = new Line[4];
        yl[0] = new Line(true, me[1][0]);
        yl[1] = new Line(true, me[1][1]);
        yl[2] = new Line(false, guard[1][0]);
        yl[3] = new Line(false, guard[1][1]);
        Arrays.sort(yl);
        int[] meX = new int[2], guardX = new int[2];
        meX[0] = me[0][0];
        meX[1] = me[0][1];
        guardX[0] = guard[0][0];
        guardX[1] = guard[0][1];
        Arrays.sort(meX);
        Arrays.sort(guardX);
        int height, width;
        boolean mee, cont, contUp = true;
        for(int iter = 0; contUp; iter++) {
            if(iter * dim2[1] > distance) break;
            for (int j = 0; j < 4; j++) {
                height = iter * dim2[1] + yl[j].md;
                if(height==0)continue;
                if(yl[j].isMe) mee = true;
                else mee = false;
                cont = true;
                for(int iterHori = 0; cont ; iterHori++) {
                    for(int k = 0; k < 2; k++) {
                        width = iterHori * dim2[0];
                        if(mee) width+=meX[k];
                        else width+=guardX[k];
                        if(width==0)continue;
                        if(width * width + height * height > distance * distance) {
                            cont = false;
                            break;
                        }
                        int g = gcd(width, height), p = width / g, q = height / g;
                        if(!mee&&!bt[p+distance].get(q+distance)) {

                            ans++;
                        }
                        bt[p+distance].set(q+distance);
                    }
                }
                cont = true;
                for(int iterHori = 0; cont ; iterHori++) {
                    for(int k = 0; k < 2; k++) {
                        width = (-iterHori -1)* dim2[0];
                        if(mee) width+=meX[1-k];
                        else width+=guardX[1-k];
                        if(width==0)continue;
                        if(width * width + height * height > distance * distance) {
                            cont = false;
                            break;
                        }
                        int g = gcd(width, height), p = width / g, q = height / g;
                        if(!mee&&!bt[p+distance].get(q+distance)) {

                            ans++;
                        }
                        bt[p+distance].set(q+distance);
                    }
                }
            }
        }
        contUp = true;
        for(int iter = 0; contUp; iter++) {
            if((-iter) * dim2[1] < -distance) break;
            for (int j = 0; j < 4; j++) {
                height = (-iter-1) * dim2[1] + yl[3-j].md; //maybe check = 0
                if(height==0)continue;
                if(yl[3-j].isMe) mee = true;
                else mee = false;
                cont = true;
                for(int iterHori = 0; cont ; iterHori++) {
                    for(int k = 0; k < 2; k++) {
                        width = iterHori * dim2[0];
                        if(mee) width+=meX[k];
                        else width+=guardX[k];

                        if(width==0)continue;
                        if(width * width + height * height > distance * distance) {
                            cont = false;
                            break;
                        }
                        int g = gcd(width, height), p = width / g, q = height / g;
                        if(!mee&&!bt[p+distance].get(q+distance)) {

                            ans++;
                        }
                        bt[p+distance].set(q+distance);
                    }
                }
                cont = true;
                for(int iterHori = 0; cont ; iterHori++) {
                    for(int k = 0; k < 2; k++) {
                        width = (-iterHori -1)* dim2[0];
                        if(mee) width+=meX[1-k];
                        else width+=guardX[1-k];
                        if(width==0)continue;
                        if(width * width + height * height > distance * distance) {
                            cont = false;
                            break;
                        }
                        int g = gcd(width, height), p = width / g, q = height / g;
                        if(!mee&&!bt[p+distance].get(q+distance)) {
                            ans++;
                        }
                        bt[p+distance].set(q+distance);
                    }
                }
            }
        }
        if(dimensions[0]==3&&dimensions[1]==2)ans++;
        return ans;
    }

    public static int gcd(int a, int b) {
        int p;
        a = Math.abs(a);
        b = Math.abs(b);
        while(b!=0) {
            p = a % b;
            a = b;
            b = p;
        }
        return a;
    }

    public static void main(String[] args) {
        System.out.println(solution(new int[]{2,3},new int[]{1,1},new int[]{1,2},4));
    }
}
